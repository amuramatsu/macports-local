diff -ruN bogofilter-1.2.4.orig/bogofilter.cf.example bogofilter-1.2.4/bogofilter.cf.example
--- bogofilter-1.2.4.orig/bogofilter.cf.example	2013-06-29 23:52:57.000000000 +0900
+++ bogofilter-1.2.4/bogofilter.cf.example	2018-12-31 12:19:10.000000000 +0900
@@ -217,7 +217,7 @@
 #	minimum and maximum lengths for single tokens
 #
 #min-token-len=3			# default
-#max-token-len=30			# default
+#max-token-len=50			# default
 #
 #	count and length for multi-word tokens
 #	Note: if length not specified, defaults to
diff -ruN bogofilter-1.2.4.orig/config.in bogofilter-1.2.4/config.in
--- bogofilter-1.2.4.orig/config.in	2013-06-30 00:01:39.000000000 +0900
+++ bogofilter-1.2.4/config.in	2018-12-31 12:19:10.000000000 +0900
@@ -124,9 +124,15 @@
 /* Define to 1 if you have the <inttypes.h> header file. */
 #undef HAVE_INTTYPES_H
 
+/* Define to 1 if you have the `kakasi' library (-lkakasi). */
+#undef HAVE_LIBKAKASI
+
 /* Define to 1 if you have the `m' library (-lm). */
 #undef HAVE_LIBM
 
+/* Define to 1 if you have the `mecab' library (-lmecab). */
+#undef HAVE_LIBMECAB
+
 /* Define to 1 if you have the <limits.h> header file. */
 #undef HAVE_LIMITS_H
 
@@ -349,6 +355,9 @@
 /* Version number of package */
 #undef VERSION
 
+/* Use specified charset for kakasi/mecab */
+#undef WAKATI_CHARSET
+
 /* Define to 1 if `lex' declares `yytext' as a `char *' by default, not a
    `char[]'. */
 #undef YYTEXT_POINTER
diff -ruN bogofilter-1.2.4.orig/configure.ac bogofilter-1.2.4/configure.ac
--- bogofilter-1.2.4.orig/configure.ac	2013-06-29 23:58:27.000000000 +0900
+++ bogofilter-1.2.4/configure.ac	2018-12-31 12:19:10.000000000 +0900
@@ -18,7 +18,7 @@
 dnl                 part of the bogofilter source).
 dnl ********************************************************
 dnl
-AC_INIT([bogofilter],[1.2.4])
+AC_INIT([bogofilter],[1.2.4-jp0.1])
 dnl
 AC_PREREQ([2.68])
 AC_USE_SYSTEM_EXTENSIONS
@@ -76,6 +76,31 @@
 dnl Check for extension
 AC_EXEEXT
 
+dnl Japanese wakachigaki libs
+AC_ARG_WITH(kakasi,
+         [  --with-kakasi           KAKASI is used for wakati-gaki.],
+         [ts_with_mecab="no"], [ts_with_mecab="yes"]) 
+AC_ARG_WITH(mecab,
+         [  --with-mecab            MeCab is used for wakati-gaki (default).],
+         [ts_with_mecab="yes"]) 
+
+if test "$ts_with_mecab" = "yes"; then
+  saveLIBS="$LIBS"
+  AC_CHECK_LIB(mecab, mecab_new)
+  AC_MSG_CHECKING([MeCab libraries and headers are usable])
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <mecab.h>],[mecab_new(0, 0);])],ts_with_mecab=yes,ts_with_mecab=no)
+  AC_MSG_RESULT($ts_with_mecab)
+  if test "$ts_with_mecab" = "no"; then
+    LIBS="$saveLIBS"
+  fi
+fi
+if test "$ts_with_mecab" = "no"; then
+  AC_CHECK_LIB(kakasi, kakasi_getopt_argv)
+  AC_MSG_CHECKING([KAKASI libraries and headers are usable])
+  AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <libkakasi.h>],[kakasi_getopt_argv(0,0);])],,AC_MSG_ERROR([Usable Wakati-gaki library is not found]))
+  AC_MSG_RESULT(yes)
+fi
+
 dnl check for b0rked Solaris (and other shells) and find one that works
 AC_MSG_CHECKING(for a working shell...)
 for i in /usr/xpg6/bin/sh /usr/xpg4/bin/sh /usr/ccs/bin/sh /bin/sh /usr/bin/sh /bin/ksh /bin/bash /usr/local/bin/bash ; do
@@ -318,7 +343,8 @@
 	[Enable converting character sets to Unicode])
 	[ENCODING="utf-8"]
 fi
-[DEFAULT_CHARSET="iso-8859-1"]
+[DEFAULT_CHARSET="iso-2022-jp"]
+[WAKATI_CHARSET="euc-jp"]
 
 dnl Allow the user to enable Russian character set support
 
@@ -345,10 +371,7 @@
 AC_ARG_WITH(charset, 
 	    AS_HELP_STRING([--with-charset=name], 
 	    [use specified charset (overrides --enable-russian) [[iso-8859-1]]]), 
-	    AC_DEFINE_UNQUOTED(DEFAULT_CHARSET, 
-	    ["$withval"], 
-	    [Use specified default charset instead of iso-8859-1])
-)
+	    [DEFAULT_CHARSET="$withval"])
 
 AC_SUBST(ENCODING)
 AC_SUBST(DEFAULT_CHARSET)
@@ -356,6 +379,16 @@
 	["$DEFAULT_CHARSET"],
 	[Use specified charset])
 
+dnl Allow the user to specify a default charset
+AC_ARG_WITH(wakati-charset, 
+	    AS_HELP_STRING([--with-wakati-charset=name], 
+	    [use specified charset for kakasi/mecab [[euc-jp]]]), 
+	    [WAKATI_CHARSET="$withval"])
+AC_SUBST(WAKATI_CHARSET)
+AC_DEFINE_UNQUOTED(WAKATI_CHARSET,
+	["$WAKATI_CHARSET"],
+	[Use specified charset for kakasi/mecab])
+
 dnl Allow the user to enable memory usage debugging methods
 
 AC_ARG_ENABLE(memdebug,
@@ -525,11 +558,11 @@
 	dnl and try to guess if we need -lpthread or -lthread
 	DB_TYPE=db
 	DB_EXT=.db
-	AC_LIB_LINKFLAGS([db])
+	dnl AC_LIB_LINKFLAGS([db])
 	AC_MSG_CHECKING(db and dependent libraries)
 	saveLIBS="$LIBS"
 	havelib=0
-	for dblibs in "" "$LIBDB" ; do
+	for dblibs in "-ldb" "$LIBDB" ; do
 	    for addlibs in "" -lpthread -lthread ; do
 		LIBDB="$dblibs $addlibs"
 		export LIBDB
@@ -884,3 +917,5 @@
 AC_MSG_NOTICE([   LIBDB=$LIBDB])
 AC_MSG_NOTICE([GSL_LIBS=$GSL_LIBS])
 AC_MSG_NOTICE([LIBICONV=$LIBICONV])
+AC_MSG_NOTICE([DEFAULT_CHARSET: $DEFAULT_CHARSET])
+AC_MSG_NOTICE([WAKATI_CHARSET: $WAKATI_CHARSET])
diff -ruN bogofilter-1.2.4.orig/src/charset.c bogofilter-1.2.4/src/charset.c
--- bogofilter-1.2.4.orig/src/charset.c	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/charset.c	2018-12-31 12:19:10.000000000 +0900
@@ -34,7 +34,7 @@
 #define	SP	' '
 
 #ifndef	DEFAULT_CHARSET
-#define	DEFAULT_CHARSET	"us-ascii"
+#define	DEFAULT_CHARSET	"iso2022-jp"
 #endif
 
 const char *charset_default = DEFAULT_CHARSET;
diff -ruN bogofilter-1.2.4.orig/src/common.h bogofilter-1.2.4/src/common.h
--- bogofilter-1.2.4.orig/src/common.h	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/common.h	2018-12-31 12:19:10.000000000 +0900
@@ -36,7 +36,7 @@
 
 /* length of token between these values */
 #define MIN_TOKEN_LEN		 3	/* default value of min-token-len       */
-#define MAX_TOKEN_LEN		30	/* default value of max-token-len       */
+#define MAX_TOKEN_LEN		50	/* default value of max-token-len       */
 #define MAX_MULTI_TOKEN_LEN	30	/* default value of max-multi-token-len */
 #define	MAX_PREFIX_LEN	 	 5	/* maximum length of prefix		*/
 #define	MUL_TOKEN_CNT		 1	/* default value of multi-token-count   */
diff -ruN bogofilter-1.2.4.orig/src/convert_unicode.c bogofilter-1.2.4/src/convert_unicode.c
--- bogofilter-1.2.4.orig/src/convert_unicode.c	2013-06-29 23:52:42.000000000 +0900
+++ bogofilter-1.2.4/src/convert_unicode.c	2018-12-31 12:22:41.000000000 +0900
@@ -33,7 +33,7 @@
 #define	SP	' '
 
 #include <iconv.h>
-iconv_t cd = (iconv_t)-1;
+bf_iconv_t cd = NULL;
 
 static void map_nonascii_characters(void)
 {
@@ -106,31 +106,62 @@
     { "csgb2312",	T },
 };
 
-iconv_t bf_iconv_open( const char *to_charset, const char *from_charset )
+bf_iconv_t bf_iconv_open(const char *to_charset, const char *from_charset )
 {
-    iconv_t xd = iconv_open( to_charset, from_charset );
+    bf_iconv_t xd = xmalloc(sizeof(struct __bf_iconv));
+    xd->iconv_t = iconv_open( to_charset, from_charset );
 
-    if (xd == (iconv_t)-1) {
+    if (xd->iconv_t == (iconv_t)(-1)) {
 	int err = errno;
 	if (err == EINVAL) {
 	    if (DEBUG_ICONV(1))
 		fprintf(dbgout, "Conversion from '%s' to '%s' is not supported.\n", 
 			from_charset, to_charset );
 	    /* error - map default charset to unicode */
-	    xd = iconv_open( charset_unicode, charset_default );
+	    xd->iconv_t = iconv_open( charset_unicode, charset_default );
 	}
     }
-
+    
+    if (xd->iconv_t == (iconv_t)(-1)) {
+	xfree(xd);
+	return NULL;
+    }
+    
+    xd->from_charset = xstrdup(from_charset);
+    xd->to_charset = xstrdup(to_charset);
+    xd->in_iconv_t = xd->out_iconv_t = (iconv_t)-1;
+    xd->wakati = false;
+    if (strcasecmp(from_charset, "iso2022jp") == 0 ||
+	strcasecmp(from_charset, "iso2022-jp") == 0 ||
+	strcasecmp(from_charset, "iso-2022jp") == 0 ||
+	strcasecmp(from_charset, "iso-2022-jp") == 0 ||
+	strcasecmp(from_charset, "utf-8") == 0 ||
+	strcasecmp(from_charset, "utf8") == 0 ||
+	strcasecmp(from_charset, "shift_jis") == 0) {
+	xd->wakati = true;
+    }
     return xd;
 }
 
+void bf_iconv_close(bf_iconv_t cd)
+{
+    xfree(cd->from_charset);
+    xfree(cd->to_charset);
+    iconv_close(cd->iconv_t);
+    if (cd->in_iconv_t != (iconv_t)-1)
+	iconv_close(cd->in_iconv_t);
+    if (cd->out_iconv_t != (iconv_t)-1)
+	iconv_close(cd->out_iconv_t);
+    xfree(cd);
+}
+
 void init_charset_table_iconv(const char *from_charset, const char *to_charset)
 {
     uint idx;
 
-    if (cd != (iconv_t)-1)
-	iconv_close(cd);
-
+    if (cd != NULL)
+	bf_iconv_close(cd);
+    
     if (DEBUG_ICONV(1))
 	fprintf(dbgout, "converting %s to %s\n", from_charset, to_charset);
 
diff -ruN bogofilter-1.2.4.orig/src/convert_unicode.h bogofilter-1.2.4/src/convert_unicode.h
--- bogofilter-1.2.4.orig/src/convert_unicode.h	2013-06-29 23:52:42.000000000 +0900
+++ bogofilter-1.2.4/src/convert_unicode.h	2018-12-31 12:19:10.000000000 +0900
@@ -14,12 +14,22 @@
 #define	CHARSET_UNICODE_H
 
 #include <iconv.h>
+typedef struct __bf_iconv {
+    iconv_t iconv_t;
+    iconv_t in_iconv_t;
+    iconv_t out_iconv_t;
+    char *from_charset;
+    char *to_charset;
+    bool wakati;
+} *bf_iconv_t;
 
 extern void init_charset_table_iconv(const char *from_charset, 
 				     const char *to_charset);
 
-extern iconv_t bf_iconv_open( const char *to_charset, 
-			       const char *from_charset );
+extern bf_iconv_t bf_iconv_open( const char *to_charset, 
+				 const char *from_charset );
+
+extern void bf_iconv_close(bf_iconv_t cd);
 
 #if	defined(CP866) && !defined(ENABLE_UNICODE) && !defined(DISABLE_UNICODE)
 extern int  decode_and_htmlUNICODE_to_cp866(byte *buf, int len);
diff -ruN bogofilter-1.2.4.orig/src/iconvert.c bogofilter-1.2.4/src/iconvert.c
--- bogofilter-1.2.4.orig/src/iconvert.c	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/iconvert.c	2018-12-31 12:19:10.000000000 +0900
@@ -32,10 +32,28 @@
 #include <stdlib.h>
 #include <errno.h>
 
+#ifdef HAVE_LIBMECAB
+#include <mecab.h>
+# ifdef HAVE_LIBKAKASI
+#  undef HAVE_LIBKAKASI
+# endif
+#else
+# ifdef HAVE_LIBKAKASI
+#  include <libkakasi.h>
+# else
+#  error Cannot found kakasi & mecab both
+# endif
+#endif
+
 #include "buff.h"
 #include "iconvert.h"
+#include "convert_unicode.h"
+
+#ifndef WAKATI_CHARSET
+#define WAKATI_CHARSET "euc-jp"
+#endif
 
-extern	iconv_t cd;
+extern	bf_iconv_t cd;
 
 static void iconv_print_error(int err, buff_t *src)
 {
@@ -58,10 +76,119 @@
     }
 }
 
-static void convert(iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
+#ifdef HAVE_LIBKAKASI
+static const char *kakasi_argv[] = {
+    "kakasi", "-w", "-ieuc", "-oeuc"
+};
+#define KAKASI_ARGC	(sizeof(kakasi_argv)/sizeof(kakasi_argv[0]))
+
+static bool convert_kakasi_line(buff_t *src)
 {
-    bool done = false;
+    int c;
+    static int kakasi_init = -1;
+    const unsigned char *srcp, *srcend;
+    unsigned char *dstp, *dstend;
+    unsigned char *kakasi_buf;
+    
+    static unsigned char *buf = NULL;
+    static size_t buf_len = 0;
+    
+    srcp = src->t.u.text + src->read;
+    srcend = src->t.u.text + src->t.leng;
+    if (buf_len < srcend - srcp + 1) {
+	if ((buf = xrealloc(buf, srcend - srcp + 1)) == NULL)
+	    return NULL;
+	buf_len = srcend - srcp + 1;
+    }
+    
+    dstp = buf;
+    while (srcp < srcend && (c = *srcp++) != '\0')
+	*dstp++ = (unsigned char)c;
+    *dstp = '\0';
+    
+    if (kakasi_init != 0)
+	kakasi_init = kakasi_getopt_argv(KAKASI_ARGC, (char **)kakasi_argv);
+    if (kakasi_init != 0) {
+	fprintf(stderr, "Unable to open kakasi library.\n");
+	abort();
+	exit(2);
+    }
+    kakasi_buf = kakasi_do((char *)buf);
+    
+    /*
+     * do nothing if kakasi_do() failed.
+     */
+    if (kakasi_buf == NULL || kakasi_buf[0] == '\0')
+	return false;
+    
+    srcp = kakasi_buf;
+    dstp = src->t.u.text;
+    dstend = src->t.u.text + src->size;
+    while (dstp < dstend && (c = *srcp++) != '\0')
+	*dstp++ = (unsigned char)c;
+    if (dstp < dstend) {
+	*dstp = '\0';
+	src->t.leng = strlen((char *)src->t.u.text);
+    }
+    else
+	src->t.leng = src->size;
+    src->read = 0;
+    
+    kakasi_free((char *)kakasi_buf);
+    return true;
+}
+#endif /* HAVE_LIBKAKASI */
 
+#ifdef HAVE_LIBMECAB
+static const char *mecab_argv[] = {
+    "mecab", "-O", "wakati"
+};
+#define MECAB_ARGC	(sizeof(mecab_argv)/sizeof(mecab_argv[0]))
+
+static bool convert_mecab_line(buff_t *src)
+{
+    int c = 0;
+    static mecab_t *mecab_handle = NULL;
+    const unsigned char *srcp;
+    unsigned char *dstp, *dstend;
+    const unsigned char *mecab_buf;
+    
+    if (mecab_handle == NULL)
+	mecab_handle = mecab_new(MECAB_ARGC, (char **)mecab_argv);
+    if (mecab_handle == NULL) {
+	fprintf(stderr, "Unable to open mecab library.\n");
+	abort();
+	exit(2);
+    }
+    mecab_buf = (const unsigned char *)mecab_sparse_tostr2(mecab_handle,
+		    (char *)src->t.u.text + src->read, src->t.leng - src->read);
+    /*
+     * do nothing if mecab_sparse_tostr2() failed.
+     */
+    if (mecab_buf == NULL)
+	return false;
+    
+    srcp = mecab_buf;
+    dstp = src->t.u.text;
+    dstend = src->t.u.text + src->size;
+    while (dstp < dstend && (c = *srcp++) != '\0')
+	*dstp++ = (unsigned char)c;
+    if (dstp < dstend) {
+	*dstp = '\0';
+	src->t.leng = strlen(src->t.u.text);
+    }
+    else
+	src->t.leng = src->size;
+    src->read = 0;
+    
+    return true;
+}
+#endif /* HAVE_LIBMECAB */
+
+static void convert_impl(iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
+{
+    bool done = false;
+    
     while (!done) {
 	char * inbuf;
 	size_t inbytesleft;
@@ -181,6 +308,57 @@
 		src->t.u.text, src->read, src->t.leng, src->size);
 }
 
+static void convert_wakati(bf_iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
+{
+#if defined(HAVE_LIBKAKASI)||defined(HAVE_LIBMECAB)
+    iconv_t ic;
+    static buff_t *buff = NULL;
+
+    if (xd->in_iconv_t == (iconv_t)-1)
+	xd->in_iconv_t = iconv_open(WAKATI_CHARSET, xd->from_charset);
+    if (xd->out_iconv_t == (iconv_t)-1)
+	xd->out_iconv_t = iconv_open(xd->to_charset, WAKATI_CHARSET);
+    if (xd->in_iconv_t == (iconv_t)-1 || xd->out_iconv_t == (iconv_t)-1) {
+	xd->wakati = false;
+	goto error;
+    }
+    
+    if (buff == NULL) {
+	if ((buff = buff_new(xmalloc(dst->size + D), 0, dst->size)) == NULL)
+	    goto error;
+    }
+    else if (buff->size < dst->size) {
+	buff->t.u.text = (byte *)xrealloc(buff->t.u.text, dst->size + D);
+	if (buff->t.u.text == NULL)
+	    goto error;
+	buff->size = dst->size;
+    }
+    
+    convert_impl(xd->in_iconv_t, src, buff);
+#ifdef HAVE_LIBKAKASI
+    if (!convert_kakasi_line(buff))
+	goto error;
+#endif
+#ifdef HAVE_LIBMECAB
+    if (!convert_mecab_line(buff))
+	goto error;
+#endif
+    convert_impl(xd->out_iconv_t, buff, dst);
+    return;
+
+ error:
+#endif /* HAVE_LIBKAKASI || HAVE_LIBMECAB */
+    convert_impl(xd->iconv_t, src, dst);
+}
+
+static void convert(bf_iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
+{
+    if (xd->wakati)
+	convert_wakati(xd, src, dst);
+    else
+	convert_impl(xd->iconv_t, src, dst);
+}    
+
 static void copy(buff_t *restrict src, buff_t *restrict dst)
 {
     /* if conversion not available, use memcpy */
@@ -196,9 +374,9 @@
 	convert(cd, src, dst);
 }
 
-void iconvert_cd(iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
+void iconvert_cd(bf_iconv_t xd, buff_t *restrict src, buff_t *restrict dst)
 {
-    if (xd == (iconv_t)-1)
+    if (xd == NULL)
 	copy(src, dst);
     else
 	convert(xd, src, dst);
diff -ruN bogofilter-1.2.4.orig/src/iconvert.h bogofilter-1.2.4/src/iconvert.h
--- bogofilter-1.2.4.orig/src/iconvert.h	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/iconvert.h	2018-12-31 12:19:10.000000000 +0900
@@ -16,8 +16,9 @@
 #include "config.h"
 
 #include <iconv.h>
+#include "convert_unicode.h"
 
 extern void iconvert(buff_t *restrict src, buff_t *restrict dst);
-extern void iconvert_cd(iconv_t cd, buff_t *restrict src, buff_t *restrict dst);
+extern void iconvert_cd(bf_iconv_t cd, buff_t *restrict src, buff_t *restrict dst);
 
 #endif
diff -ruN bogofilter-1.2.4.orig/src/lexer.c bogofilter-1.2.4/src/lexer.c
--- bogofilter-1.2.4.orig/src/lexer.c	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/lexer.c	2018-12-31 12:19:10.000000000 +0900
@@ -399,7 +399,7 @@
     uint size = (uint) (txt - beg);				/* output offset */
 
 #ifndef	DISABLE_UNICODE
-    size_t max = w->leng * 4;
+    size_t max = w->leng * 4 * 2;
     static buff_t * buf = NULL;
 #endif
 
@@ -480,7 +480,7 @@
 
 #ifndef	DISABLE_UNICODE
 	if (encoding == E_UNICODE) {
-	    iconv_t cd;
+	    bf_iconv_t cd;
 	    buff_t  src;
 
 	    /* convert 'word_t *w' to 'buff_t src' because
@@ -490,10 +490,10 @@
 	    src.t.leng = len;
 	    src.read   = 0;
 	    src.size   = len;
-
-	    cd = bf_iconv_open( charset_unicode, charset );
+	    
+	    cd = bf_iconv_open(charset_unicode, charset );
 	    iconvert_cd(cd, &src, buf);
-	    iconv_close(cd);
+	    bf_iconv_close(cd);
 
 	    if (DEBUG_LEXER(3)) {
 		fputs("**4**  ", dbgout);
diff -ruN bogofilter-1.2.4.orig/src/maint.c bogofilter-1.2.4/src/maint.c
--- bogofilter-1.2.4.orig/src/maint.c	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/maint.c	2018-12-31 12:19:10.000000000 +0900
@@ -208,7 +208,7 @@
 	old_buff.t.leng = token.leng;
 
 	new_buff.read = 0;
-	new_buff.size = token.leng * 6;
+	new_buff.size = token.leng * 6 * 2;
 	new_buff.t.leng = 0;
 	new_buff.t.u.text = (byte *)xmalloc(new_buff.size);
 
diff -ruN bogofilter-1.2.4.orig/src/mime.c bogofilter-1.2.4/src/mime.c
--- bogofilter-1.2.4.orig/src/mime.c	2013-06-29 23:52:52.000000000 +0900
+++ bogofilter-1.2.4/src/mime.c	2018-12-31 12:19:10.000000000 +0900
@@ -161,7 +161,7 @@
     msg_state->boundary = NULL;
     msg_state->boundary_len = 0;
     msg_state->parent = parent;
-    msg_state->charset = xstrdup("US-ASCII");
+    msg_state->charset = xstrdup("iso2022-jp");
     msg_state->depth = (parent == NULL) ? 0 : msg_state->parent->depth + 1;
     msg_state->child  = NULL;
     msg_state->mime_dont_decode = false;
